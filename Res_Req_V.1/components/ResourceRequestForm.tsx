import React, { useState, useEffect, useMemo } from 'react';
import { Resource, RequestItem, Language } from '../types';
import useLocalStorage from '../hooks/useLocalStorage';
import AddItemModal from './AddItemModal';
import EditItemModal from './EditItemModal';
import BulkAddModal from './BulkAddModal';
import { PlusIcon, TrashIcon, SearchIcon, DownloadIcon, PencilIcon, UploadIcon } from './Icons';
import { resourcesData } from '../resources';
import * as docx from 'docx';

// --- MANUAL LOGO INTEGRATION ---
// 1. Convert your logo image (e.g., logo.png) to a Base64 string.
//    You can use a free online tool: search for "image to base64 converter".
// 2. Copy the entire long string of characters generated by the converter.
// 3. Paste your string between the quotes below, replacing the empty string.
// Example: const LOGO_BASE64_PLACEHOLDER = "iVBORw0KGgoAAAANSUhEUgA...";
const LOGO_BASE_64_PLACEHOLDER = "iVBORw0KGgoAAAANSUhEUgAADWEAAAalCAYAAADkO+s8AAAACXBIWXMAAC4jAAAuIwF4pT92AAAgAElEQVR42uzbwQ3CMBQFQYwoi1Qf+jINwEpccCzNVPCuX/aOOecNAAAAAAAAAAAAAAAAgM/uqwcAAAAAAAAAAAAAAAAAXJkICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIIICwAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAACCCAsAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAAAgggLAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAAAAIII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AAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAHcJdlQAAAcCSURBVAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAAAAACAIMICAAAAAAAAAAAAAAAACCIsAAAAAAAAAAAAAAAAgCDCAgAAAAAAAAAAAAAAAAgiLAAAAAAAAAAAAAAAAIAgwgIAAAAAAAAAAAAAAAAIIiwAAAAAAAAAAAB+27cDAQAAAABB/tYbTFAeAQAAAEPCAgAAAAAAAAAAAAAAABgSFgAAAAAAAAAAAAAAAMCQsAAAAAAAAAAAAAAAAACGhAUAAAAAAAAAAAAAAAAwJCwAAAAAAAAAAAAAAACAIWEBAAAAAAAAAAAAAAAADAkLAAAAAAAAAAAAAAAAYEhYAAAAAAAAAAAAAAAAAEPCAgAAAAAAAAAAAAAAABgBa0GQ2oRSLf0AAAAASUVORK5CYII=";

const translations = {
    en: {
        header: "SIR Request Form",
        subHeader: "SIR نموذج طلب موارد",
        toggleLang: "العربية",
        startNewRequest: "Start New Request",
        startNewRequestConfirm: "Are you sure you want to start a new request? Your current list will be cleared.",
        searchPlaceholder: "Search by item name or number...",
        itemNumber: "#",
        item: "Item",
        itemEnglish: "Item (English)",
        itemArabic: "Item (Arabic)",
        unit: "Unit",
        quantity: "Quantity",
        actions: "Actions",
        addItem: "Add Item",
        bulkAdd: "Bulk Add",
        requesterName: "Requester Name",
        requesterNamePlaceholder: "Enter your name...",
        budgetLine: "Budget Line",
        selectBudget: "Select a budget line",
        otherBudget: "Other (Please specify)",
        otherBudgetPlaceholder: "Specify budget line...",
        submitRequest: "Export to Excel",
        requestedItems: "Requested Items",
        noItems: "No items requested yet.",
        loading: "Loading resources...",
        noResults: "Item not found, please add the item you need.",
        startTyping: "Start typing to search for resources...",
        alertRequester: "Please enter the requester's name.",
        alertBudget: "Please select a budget line.",
        alertItems: "Please add items to the request.",
        exportToWord: "Export to Word",
        generatingWord: "Generating Word...",
        requester: "Requester",
        date: "Date",
        itemAddedSuccess: "Item added successfully!",
        itemUpdatedSuccess: "Item updated successfully!",
        bulkAddSuccess: "Items imported successfully!",
        confirm: "Confirm",
        cancel: "Cancel",
    },
    ar: {
        header: "SIR نموذج طلب موارد",
        subHeader: "SIR Request Form",
        toggleLang: "English",
        startNewRequest: "بدء طلب جديد",
        startNewRequestConfirm: "هل أنت متأكد من أنك تريد بدء طلب جديد؟ سيتم مسح قائمتك الحالية.",
        searchPlaceholder: "ابحث باسم العنصر أو رقمه...",
        itemNumber: "#",
        item: "الصنف",
        itemEnglish: "الصنف (انجليزي)",
        itemArabic: "الصنف (عربي)",
        unit: "الوحدة",
        quantity: "الكمية",
        actions: "إجراءات",
        addItem: "إضافة عنصر",
        bulkAdd: "إضافة دفعة",
        requesterName: "اسم مقدم الطلب",
        requesterNamePlaceholder: "أدخل اسمك...",
        budgetLine: "بند الميزانية",
        selectBudget: "اختر بند الميزانية",
        otherBudget: "أخرى (يرجى التحديد)",
        otherBudgetPlaceholder: "حدد بند الميزانية...",
        submitRequest: "تصدير إلى Excel",
        requestedItems: "العناصر المطلوبة",
        noItems: "لم يتم طلب أي عناصر بعد.",
        loading: "جاري تحميل الموارد...",
        noResults: " العنصر غير موجود، يجى إضافة العنصر الذي تحتاجه",
        startTyping: "ابدأ بالكتابة للبحث عن الموارد...",
        alertRequester: "يرجى إدخال اسم مقدم الطلب.",
        alertBudget: "يرجى اختيار بند الميزانية.",
        alertItems: "يرجى إضافة عناصر إلى الطلب.",
        exportToWord: "تصدير إلى Word",
        generatingWord: "جاري إنشاء ملف Word...",
        requester: "مقدم الطلب",
        date: "التاريخ",
        itemAddedSuccess: "تمت إضافة العنصر بنجاح!",
        itemUpdatedSuccess: "تم تحديث العنصر بنجاح!",
        bulkAddSuccess: "تم استيراد العناصر بنجاح!",
        confirm: "تأكيد",
        cancel: "إلغاء",
    }
};

const budgetLines = {
    en: ["Educational Supplies", "Clubs", "Books and Board Games", "Child Protection and Safeguarding", "Summer Camp Activities", "Other"],
    ar: ["لوازم تعليمية", "الأندية", "كتب وألعاب لوحية", "حماية الطفل والحفاظ على سلامته", "أنشطة المخيم الصيفي", "أخرى"]
};

const unitTranslations: { [key: string]: { en: string; ar: string } } = {
    "Piece": { en: "Piece", ar: "قطعة" },
    "Pack": { en: "Pack", ar: "علبة" },
    "Box": { en: "Box", ar: "صندوق" },
    "Set": { en: "Set", ar: "مجموعة" },
    "Ream": { en: "Ream", ar: "رزمة" },
    "Pair": { en: "Pair", ar: "زوج" },
};

// Helper function to convert base64 string to ArrayBuffer for the docx library
function base64ToArrayBuffer(base64: string) {
    const binaryString = window.atob(base64);
    const len = binaryString.length;
    const bytes = new Uint8Array(len);
    for (let i = 0; i < len; i++) {
        bytes[i] = binaryString.charCodeAt(i);
    }
    // Fix: Return Uint8Array directly instead of ArrayBuffer to resolve type ambiguity in docx library's ImageRun constructor.
    return bytes;
}

const ResourceRequestForm: React.FC = () => {
    const [lang, setLang] = useLocalStorage<Language>('lang', 'en');
    const [customResources, setCustomResources] = useLocalStorage<Resource[]>('customResources', []);
    const [search, setSearch] = useState('');
    const [filteredResources, setFilteredResources] = useState<Resource[]>([]);
    const [request, setRequest] = useState<Map<number, number>>(new Map());
    const [requesterName, setRequesterName] = useState('');
    const [budgetLine, setBudgetLine] = useState('');
    const [otherBudgetLine, setOtherBudgetLine] = useState('');
    const [isAddModalOpen, setIsAddModalOpen] = useState(false);
    const [isEditModalOpen, setIsEditModalOpen] = useState(false);
    const [isBulkAddModalOpen, setIsBulkAddModalOpen] = useState(false);
    const [editingItem, setEditingItem] = useState<Resource | null>(null);
    const [isGeneratingWord, setIsGeneratingWord] = useState(false);
    const [successMessage, setSuccessMessage] = useState('');
    const [isNewRequestConfirmOpen, setIsNewRequestConfirmOpen] = useState(false);
    
    const t = translations[lang];

    useEffect(() => {
        if (successMessage) {
            const timer = setTimeout(() => {
                setSuccessMessage('');
            }, 3000);
            return () => clearTimeout(timer);
        }
    }, [successMessage]);

    const resources = useMemo(() => {
        const resourceMap = new Map<string, Resource>();
        
        const cleanName = (name: string) => name.replace(/\s*\((Extra|إضافي).*\)/i, '').trim();

        resourcesData.forEach(item => {
            const cleanedItem = {
                ...item,
                item_english: cleanName(item.item_english),
                item_arabic: cleanName(item.item_arabic),
            };
            resourceMap.set(cleanedItem.item_english.toLowerCase(), cleanedItem);
        });

        customResources.forEach(item => {
             const cleanedItem = {
                ...item,
                item_english: cleanName(item.item_english),
                item_arabic: cleanName(item.item_arabic),
            };
            resourceMap.set(cleanedItem.item_english.toLowerCase(), cleanedItem);
        });

        return Array.from(resourceMap.values()).sort((a, b) => a.item_number - b.item_number);
    }, [customResources]);

    useEffect(() => {
        if (!search.trim()) {
            setFilteredResources([]);
        } else {
            const lower = search.toLowerCase().trim();
            const searchPredicate = (name: string) =>
                name.toLowerCase().split(' ').some(word => word.startsWith(lower));

            setFilteredResources(
                resources.filter(item =>
                    String(item.item_number).startsWith(lower) ||
                    searchPredicate(item.item_english) ||
                    searchPredicate(item.item_arabic)
                )
            );
        }
    }, [search, resources]);

    const requestedItemsList = useMemo((): RequestItem[] => {
        const itemMap = new Map<number, RequestItem>();

        request.forEach((quantity, item_number) => {
            const resource = resources.find(r => r.item_number === item_number);
            if (resource) {
                if (itemMap.has(item_number)) {
                    const existing = itemMap.get(item_number)!;
                    existing.quantity += quantity;
                } else {
                    itemMap.set(item_number, { ...resource, quantity });
                }
            }
        });

        return Array.from(itemMap.values()).sort((a, b) => a.item_number - b.item_number);
    }, [request, resources]);
    
    const handleStartNewRequest = () => {
        setIsNewRequestConfirmOpen(true);
    };

    const handleConfirmNewRequest = () => {
        setRequest(new Map());
        setRequesterName('');
        setBudgetLine('');
        setOtherBudgetLine('');
        setSearch('');
        setIsNewRequestConfirmOpen(false);
    };

    const handleInputChange = (itemNumber: number, value: string) => {
        const quantity = parseInt(value, 10);
        setRequest(prevRequest => {
            const newRequest = new Map(prevRequest);
            if (!isNaN(quantity) && quantity > 0) { newRequest.set(itemNumber, quantity); }
            else { newRequest.delete(itemNumber); }
            return newRequest;
        });
    };

    const handleRemoveItem = (itemNumber: number) => {
        setRequest(prevRequest => {
            const newRequest = new Map(prevRequest);
            newRequest.delete(itemNumber);
            return newRequest;
        });
    };

    const isFormValidForExport = useMemo(() => {
        const isBudgetSelected = budgetLine && (budgetLine !== 'Other' || (budgetLine === 'Other' && otherBudgetLine.trim() !== ''));
        const isRequesterNamed = requesterName.trim() !== '';
        return isBudgetSelected && isRequesterNamed;
    }, [budgetLine, otherBudgetLine, requesterName]);

    const handleExportChecks = () => {
        if (!requesterName.trim()) {
            alert(t.alertRequester);
            return false;
        }
        if (!budgetLine || (budgetLine === 'Other' && !otherBudgetLine.trim())) {
            alert(t.alertBudget);
            return false;
        }
        if (requestedItemsList.length === 0) {
            alert(t.alertItems);
            return false;
        }
        return true;
    }

    const handleCSVExport = () => {
        if (!handleExportChecks()) return;
        
        const finalBudgetLine = budgetLine === 'Other' ? otherBudgetLine.trim() : budgetLine;
        const headers = ["#", "Item (English)", "Item (Arabic)", "Unit", "Quantity", "Budget Line"];
        const rows = requestedItemsList.map((item, index) => {
            const escapeCsvField = (field: any) => `"${String(field).replace(/"/g, '""')}"`;
            const rowData = [index + 1, escapeCsvField(item.item_english), escapeCsvField(item.item_arabic), escapeCsvField(item.unit), item.quantity, escapeCsvField(finalBudgetLine)];
            return rowData.join(',');
        });
        const csvString = [headers.join(','), ...rows].join('\n');
        const blob = new Blob(['\uFEFF' + csvString], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement("a");
        const url = URL.createObjectURL(blob);
        link.setAttribute("href", url);
        link.setAttribute("download", `SIR_Request_${new Date().toISOString().split('T')[0]}.csv`);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
    };
    
    const handleWordExport = async () => {
        if (!handleExportChecks()) return;
    
        setIsGeneratingWord(true);
        
        try {
            const finalBudgetLine = budgetLine === 'Other' ? otherBudgetLine.trim() : budgetLine;
            const requestDate = new Date();
            const displayDate = requestDate.toLocaleDateString(lang === 'ar' ? 'ar-EG-u-nu-latn' : 'en-GB');
            const fileDate = requestDate.toISOString().split('T')[0];
    
            let logoImageRun: docx.ImageRun | undefined;
            if (LOGO_BASE_64_PLACEHOLDER) {
                try {
                    const imageBuffer = base64ToArrayBuffer(LOGO_BASE_64_PLACEHOLDER);
                    
                    const getLogoDimensions = (base64: string): Promise<{ width: number; height: number }> => {
                        return new Promise((resolve, reject) => {
                            const img = new Image();
                            img.onload = () => {
                                const maxWidth = 200; // Set a max width for the logo in the document.
                                const aspectRatio = img.naturalHeight / img.naturalWidth;
                                const width = Math.min(img.naturalWidth, maxWidth);
                                const height = width * aspectRatio;
                                resolve({ width, height });
                            };
                            img.onerror = reject;
                            img.src = `data:image/png;base64,${base64}`;
                        });
                    };

                    const { width, height } = await getLogoDimensions(LOGO_BASE_64_PLACEHOLDER);

                    // Fix: The type should be 'png' since the image data is a PNG.
                    logoImageRun = new docx.ImageRun({
                        type: "png",
                        data: imageBuffer,
                        transformation: {
                            width,
                            height,
                        },
                    });
                } catch (e) {
                    console.warn("Could not process the Base64 logo. It will not be included in the report.", e);
                }
            }
    
            const tableHeader = new docx.TableRow({
                children: [
                    t.itemNumber, t.itemEnglish, t.itemArabic, t.unit, t.quantity
                ].map(text => new docx.TableCell({
                    children: [new docx.Paragraph({ text, style: lang === 'ar' ? 'headerStyleAr' : 'headerStyle' })],
                    shading: { fill: "E0E0E0", type: docx.ShadingType.SOLID },
                })),
            });
    
            const dataRows = requestedItemsList.map((item, index) => new docx.TableRow({
                children: [
                    new docx.TableCell({ children: [new docx.Paragraph({ text: String(index + 1), style: "cellStyleCenter" })] }),
                    new docx.TableCell({ children: [new docx.Paragraph({ text: item.item_english, style: "cellStyle" })] }),
                    new docx.TableCell({ children: [new docx.Paragraph({ text: item.item_arabic, style: "cellStyleAr" })] }),
                    new docx.TableCell({ children: [new docx.Paragraph({ text: unitTranslations[item.unit]?.[lang] || item.unit, style: lang === 'ar' ? "cellStyleAr" : "cellStyle" })] }),
                    new docx.TableCell({ children: [new docx.Paragraph({ text: String(item.quantity), style: "cellStyleCenter" })] }),
                ],
                ...(index % 2 !== 0 && { shading: { fill: "F5F5F5", type: docx.ShadingType.SOLID } })
            }));
    
            const docChildren = [
                ...(logoImageRun ? [new docx.Paragraph({ children: [logoImageRun], alignment: docx.AlignmentType.CENTER, spacing: { after: 200 } })] : []),
                new docx.Paragraph({ text: t.header, style: "titleStyle" }),
                new docx.Paragraph({ text: `${t.requester}: ${requesterName}`, style: lang === 'ar' ? 'subTitleStyleAr' : 'subTitleStyle' }),
                new docx.Paragraph({ text: `${t.date}: ${displayDate}`, style: lang === 'ar' ? 'subTitleStyleAr' : 'subTitleStyle' }),
                new docx.Paragraph({ text: `${t.budgetLine}: ${finalBudgetLine}`, style: lang === 'ar' ? 'subTitleStyleAr' : 'subTitleStyle' }),
                new docx.Paragraph({ text: "" }),
                new docx.Table({
                    width: { size: 100, type: docx.WidthType.PERCENTAGE },
                    rows: [tableHeader, ...dataRows],
                }),
            ];
    
            const doc = new docx.Document({
                styles: {
                    paragraphStyles: [
                        { id: "headerStyle", name: "Header Style", run: { bold: true, color: "ff6600", font: "Montserrat" }, paragraph: { alignment: docx.AlignmentType.CENTER, spacing: { before: 100, after: 100 } } },
                        { id: "headerStyleAr", name: "Header Style Arabic", run: { bold: true, color: "ff6600", font: "Arial", rightToLeft: true }, paragraph: { alignment: docx.AlignmentType.CENTER, spacing: { before: 100, after: 100 } } },
                        { id: "titleStyle", name: "Title Style", run: { size: 32, bold: true, color: "3c3c3b", font: "Montserrat" }, paragraph: { alignment: docx.AlignmentType.CENTER, spacing: { after: 200 } } },
                        { id: "subTitleStyle", name: "Subtitle Style", run: { size: 24, color: "3c3c3b", font: "Montserrat" }, paragraph: { alignment: docx.AlignmentType.LEFT, spacing: { after: 100 } } },
                        { id: "subTitleStyleAr", name: "Subtitle Style Arabic", run: { size: 24, color: "3c3c3b", font: "Arial", rightToLeft: true }, paragraph: { alignment: docx.AlignmentType.RIGHT, spacing: { after: 100 } } },
                        { id: "cellStyle", name: "Cell Style", run: { color: "3c3c3b", font: "Montserrat" }, paragraph: { alignment: docx.AlignmentType.LEFT } },
                        { id: "cellStyleAr", name: "Cell Style Arabic", run: { color: "3c3c3b", font: "Arial", rightToLeft: true }, paragraph: { alignment: docx.AlignmentType.RIGHT } },
                        { id: "cellStyleCenter", name: "Cell Style Centered", run: { color: "3c3c3b", font: "Montserrat" }, paragraph: { alignment: docx.AlignmentType.CENTER } },
                    ]
                },
                sections: [{
                    properties: {
                        page: { margin: { top: 720, right: 720, bottom: 720, left: 720 } },
                        ...(lang === 'ar' && { type: docx.SectionType.CONTINUOUS, rightToLeft: true }),
                    },
                    children: docChildren,
                }],
            });
    
            const blob = await docx.Packer.toBlob(doc);
            const link = document.createElement("a");
            const url = URL.createObjectURL(blob);
            link.href = url;
            link.download = `SIR_Request_${fileDate}.docx`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url);
    
        } catch (error) {
            console.error("Failed to generate Word document", error);
        } finally {
            setIsGeneratingWord(false);
        }
    };


    const handleAddNewItem = (newItem: Omit<Resource, 'item_number' | 'category'>) => {
        setCustomResources(prev => {
            const allResources = [...resourcesData, ...prev];
            const maxId = allResources.reduce((max, r) => Math.max(max, r.item_number), 0);
            const newResource: Resource = { ...newItem, item_number: maxId + 1, category: "Custom" };
            return [...prev, newResource];
        });
        setSuccessMessage(t.itemAddedSuccess);
    };

    const handleBulkAdd = (items: { item_english: string; item_arabic: string; unit: string; quantity: number }[]) => {
        setCustomResources(prevCustomResources => {
            const allCurrentResources = [...resourcesData, ...prevCustomResources];
            let maxId = allCurrentResources.reduce((max, item) => Math.max(max, item.item_number), 0);
    
            const newCustomResources: Resource[] = [];
            const itemsForRequest = new Map<number, number>();
    
            items.forEach(item => {
                if (item.item_english.trim() && item.item_arabic.trim() && item.unit.trim()) {
                    maxId++;
                    const newResource: Resource = {
                        item_number: maxId,
                        item_english: item.item_english,
                        item_arabic: item.item_arabic,
                        unit: item.unit,
                        category: "Custom",
                    };
                    newCustomResources.push(newResource);
                    
                    if (item.quantity > 0) {
                        itemsForRequest.set(newResource.item_number, item.quantity);
                    }
                }
            });
    
            if (itemsForRequest.size > 0) {
                setRequest(prevRequest => {
                    const newRequest = new Map(prevRequest);
                    itemsForRequest.forEach((quantity, item_number) => {
                        const existingQuantity = newRequest.get(item_number) || 0;
                        newRequest.set(item_number, existingQuantity + quantity);
                    });
                    return newRequest;
                });
            }
    
            return [...prevCustomResources, ...newCustomResources];
        });
        setSuccessMessage(t.bulkAddSuccess);
    };


    const handleOpenEditModal = (item: Resource) => { setEditingItem(item); setIsEditModalOpen(true); };
    const handleCloseEditModal = () => { setIsEditModalOpen(false); setEditingItem(null); };
    const handleSaveItem = (updatedItem: Resource, quantity: number) => {
        const isDefaultItem = resourcesData.some(r => r.item_number === updatedItem.item_number);
        if (isDefaultItem && !customResources.some(r => r.item_number === updatedItem.item_number)) { setCustomResources(prev => [...prev, updatedItem]); }
        else { setCustomResources(prev => prev.map(item => item.item_number === updatedItem.item_number ? updatedItem : item)); }
        handleInputChange(updatedItem.item_number, String(quantity));
        handleCloseEditModal();
        setSuccessMessage(t.itemUpdatedSuccess);
    };

    const toggleLanguage = () => { setLang(prevLang => (prevLang === 'en' ? 'ar' : 'en')); };
    
    return (
        <div className="container mx-auto p-4 md:p-8" dir={lang === 'ar' ? 'rtl' : 'ltr'}>
            <div
              className={`fixed top-5 ${
                lang === 'ar' ? 'left-5' : 'right-5'
              } z-50 transition-all duration-300 ease-in-out ${
                successMessage
                  ? 'opacity-100 translate-y-0'
                  : 'opacity-0 -translate-y-5 pointer-events-none'
              }`}
            >
              <div
                className="bg-green-500 text-white font-bold px-4 py-3 rounded-lg shadow-lg"
                role="alert"
              >
                <p>{successMessage}</p>
              </div>
            </div>

            <header className="flex flex-col md:flex-row justify-between items-center mb-8 pb-4 border-b-2 border-gray-200">
                <div className="flex items-center gap-4">
                    {LOGO_BASE_64_PLACEHOLDER && (
                        <div className="h-16 w-40 flex-shrink-0">
                            <img
                                src={`data:image/png;base64,${LOGO_BASE_64_PLACEHOLDER}`}
                                alt="Logo"
                                className="h-full w-full object-contain"
                            />
                        </div>
                    )}
                    <div className={lang === 'ar' ? 'text-right' : 'text-left'}>
                        <h1 className="text-3xl md:text-4xl font-bold text-primary">{t.header}</h1>
                        <p className="text-md text-secondary-gray-dark">{t.subHeader}</p>
                    </div>
                </div>
                <div className="flex items-center gap-4 mt-4 md:mt-0">
                    <button
                        onClick={handleStartNewRequest}
                        className="px-4 py-2 bg-gray-200 text-primary font-semibold rounded-md hover:bg-gray-300 transition-colors duration-300"
                    >
                        {t.startNewRequest}
                    </button>
                    <button
                        onClick={toggleLanguage}
                        className="px-4 py-2 bg-accent text-white font-semibold rounded-md hover:bg-accent-dark transition-colors duration-300"
                    >
                        {t.toggleLang}
                    </button>
                </div>
            </header>

            <main>
                <div className="flex flex-col md:flex-row gap-4 mb-6">
                    <div className="relative flex-grow">
                        <span className={`absolute inset-y-0 ${lang === 'en' ? 'left-0' : 'right-0'} flex items-center pl-3 pr-3`}>
                            <SearchIcon className="h-5 w-5 text-gray-400" />
                        </span>
                        <input
                            type="text"
                            placeholder={t.searchPlaceholder}
                            value={search}
                            onChange={(e) => setSearch(e.target.value)}
                            className={`w-full py-2 ${lang === 'en' ? 'pl-10 pr-4' : 'pr-10 pl-4'} text-gray-700 bg-white border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-accent`}
                        />
                    </div>
                    <button
                        onClick={() => setIsBulkAddModalOpen(true)}
                        className="flex items-center justify-center gap-2 px-4 py-2 bg-secondary-gray-dark text-white font-semibold rounded-md hover:bg-primary transition-colors duration-300"
                    >
                        <UploadIcon className="w-5 h-5" />
                        <span>{t.bulkAdd}</span>
                    </button>
                    <button
                        onClick={() => setIsAddModalOpen(true)}
                        className="flex items-center justify-center gap-2 px-4 py-2 bg-accent text-white font-semibold rounded-md hover:bg-accent-dark transition-colors duration-300"
                    >
                        <PlusIcon className="w-5 h-5" />
                        <span>{t.addItem}</span>
                    </button>
                </div>

                <div className="bg-white shadow-md rounded-lg overflow-x-auto mb-8">
                    <table className="w-full text-sm text-left text-gray-500">
                        <thead className="text-xs text-gray-700 uppercase bg-gray-100">
                            <tr>
                                <th scope="col" className="hidden md:table-cell px-4 py-3">{t.itemNumber}</th>
                                <th scope="col" className="px-6 py-3">{t.item}</th>
                                <th scope="col" className="px-4 py-3">{t.unit}</th>
                                <th scope="col" className="px-6 py-3 text-center">{t.quantity}</th>
                                <th scope="col" className="px-4 py-3 text-center"></th>
                            </tr>
                        </thead>
                        <tbody>
                            {filteredResources.length > 0 ? (
                                filteredResources.map((item) => (
                                    <tr key={item.item_number} className="bg-white border-b hover:bg-gray-50">
                                        <td className="hidden md:table-cell px-4 py-4 font-medium text-gray-900">{item.item_number}</td>
                                        <td className="px-6 py-4">
                                            <div>{item.item_english}</div>
                                            <div className="text-gray-500" dir="rtl">{item.item_arabic}</div>
                                        </td>
                                        <td className="px-4 py-4">{unitTranslations[item.unit]?.[lang] || item.unit}</td>
                                        <td className="px-6 py-4">
                                            <input
                                                type="number"
                                                min="0"
                                                className="w-20 mx-auto block px-2 py-1 border border-gray-300 rounded-md text-center focus:ring-accent focus:border-accent"
                                                placeholder="0"
                                                value={request.get(item.item_number) || ''}
                                                onChange={(e) => handleInputChange(item.item_number, e.target.value)}
                                                aria-label={`Quantity for ${item.item_english}`}
                                            />
                                        </td>
                                        <td className="px-4 py-4 text-center">
                                            <button onClick={() => handleOpenEditModal(item)} className="text-secondary-gray-dark hover:text-accent p-1">
                                                <PencilIcon className="w-5 h-5" />
                                            </button>
                                        </td>
                                    </tr>
                                ))
                            ) : (
                                <tr>
                                    <td colSpan={5} className="text-center py-8 text-gray-500">
                                        {search.trim() ? t.noResults : t.startTyping}
                                    </td>
                                </tr>
                            )}
                        </tbody>
                    </table>
                </div>

                {requestedItemsList.length > 0 && (
                    <div className="mb-8">
                        <h2 className="text-2xl font-bold text-primary mb-4">{t.requestedItems}</h2>
                        <div className="bg-white shadow-md rounded-lg overflow-x-auto">
                            <table className="w-full text-sm text-left text-gray-500">
                                <thead className="text-xs text-gray-700 uppercase bg-gray-100">
                                    <tr>
                                        <th scope="col" className="hidden md:table-cell px-4 py-3">#</th>
                                        <th scope="col" className="px-6 py-3">{t.item}</th>
                                        <th scope="col" className="px-4 py-3">{t.quantity}</th>
                                        <th scope="col" className="px-4 py-3"></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {requestedItemsList.map((item, index) => (
                                        <tr key={item.item_number} className="bg-white border-b">
                                            <td className="hidden md:table-cell px-4 py-4 font-medium text-gray-900">{index + 1}</td>
                                            <td className="px-6 py-4">
                                                <div>{item.item_english}</div>
                                                <div className="text-gray-500" dir="rtl">{item.item_arabic}</div>
                                            </td>
                                            <td className="px-4 py-4">{item.quantity}</td>
                                            <td className="px-4 py-4 text-right">
                                                <button
                                                    onClick={() => handleRemoveItem(item.item_number)}
                                                    className="text-red-500 hover:text-red-700 transition-colors"
                                                    aria-label={`Remove ${item.item_english}`}
                                                >
                                                    <TrashIcon className="w-5 h-5" />
                                                </button>
                                            </td>
                                        </tr>
                                    ))}
                                </tbody>
                            </table>
                        </div>
                    </div>
                )}

                <div className="bg-white shadow-md rounded-lg p-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6 items-start">
                       <div className="space-y-4">
                            <div>
                                <label htmlFor="requester-name" className="block text-lg font-semibold text-primary mb-2">
                                    {t.requesterName}
                                </label>
                                <input
                                    id="requester-name"
                                    type="text"
                                    placeholder={t.requesterNamePlaceholder}
                                    value={requesterName}
                                    onChange={(e) => setRequesterName(e.target.value)}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-accent focus:border-accent"
                                />
                            </div>
                            <div>
                                <label htmlFor="budget-line" className="block text-lg font-semibold text-primary mb-2">
                                    {t.budgetLine}
                                </label>
                                <select
                                    id="budget-line"
                                    value={budgetLine}
                                    onChange={(e) => setBudgetLine(e.target.value)}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-accent focus:border-accent"
                                >
                                    <option value="">{t.selectBudget}</option>
                                    {budgetLines[lang].map((line) => (
                                        <option key={line} value={line === budgetLines.en[5] || line === budgetLines.ar[5] ? 'Other' : line}>
                                            {line}
                                        </option>
                                    ))}
                                </select>
                                {budgetLine === 'Other' && (
                                    <input
                                        type="text"
                                        placeholder={t.otherBudgetPlaceholder}
                                        value={otherBudgetLine}
                                        onChange={(e) => setOtherBudgetLine(e.target.value)}
                                        className="mt-2 w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-accent focus:border-accent"
                                    />
                                )}
                            </div>
                       </div>
                        <div className="flex flex-col sm:flex-row justify-end gap-4 md:items-end h-full">
                             <button
                                onClick={handleWordExport}
                                disabled={!isFormValidForExport || isGeneratingWord}
                                className={`flex items-center justify-center gap-2 w-full sm:w-auto px-6 py-3 font-bold rounded-md transition-colors duration-300 ${
                                    isFormValidForExport && !isGeneratingWord ? 'bg-blue-600 text-white hover:bg-blue-700' : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                                }`}
                            >
                                <DownloadIcon className="w-6 h-6" />
                                <span>{isGeneratingWord ? t.generatingWord : t.exportToWord}</span>
                            </button>
                            <button
                                onClick={handleCSVExport}
                                disabled={!isFormValidForExport}
                                className={`flex items-center justify-center gap-2 w-full sm:w-auto px-6 py-3 font-bold rounded-md transition-colors duration-300 ${
                                    isFormValidForExport ? 'bg-green-600 text-white hover:bg-green-700' : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                                }`}
                            >
                                <DownloadIcon className="w-6 h-6" />
                                <span>{t.submitRequest}</span>
                            </button>
                        </div>
                    </div>
                </div>
            </main>

            {isNewRequestConfirmOpen && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50 p-4" dir={lang === 'ar' ? 'rtl' : 'ltr'}>
                  <div className="bg-white rounded-lg shadow-2xl w-full max-w-sm transform transition-all">
                    <div className="p-6">
                      <h3 className="text-lg font-bold text-primary mb-4">{t.startNewRequest}</h3>
                      <p className="text-secondary-gray-dark mb-6">{t.startNewRequestConfirm}</p>
                      <div className="flex justify-end space-x-3 rtl:space-x-reverse">
                        <button
                          onClick={() => setIsNewRequestConfirmOpen(false)}
                          className="px-4 py-2 bg-gray-200 text-primary rounded-md hover:bg-gray-300 transition"
                        >
                          {t.cancel}
                        </button>
                        <button
                          onClick={handleConfirmNewRequest}
                          className="px-4 py-2 bg-red-600 text-white font-semibold rounded-md hover:bg-red-700 transition"
                        >
                          {t.confirm}
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
            )}

            <AddItemModal
                isOpen={isAddModalOpen}
                onClose={() => setIsAddModalOpen(false)}
                onAddItem={handleAddNewItem}
                lang={lang}
            />
            {editingItem && <EditItemModal
                isOpen={isEditModalOpen}
                onClose={handleCloseEditModal}
                onSave={handleSaveItem}
                item={editingItem}
                lang={lang}
                initialQuantity={request.get(editingItem.item_number) || 0}
            />}
            <BulkAddModal
                isOpen={isBulkAddModalOpen}
                onClose={() => setIsBulkAddModalOpen(false)}
                onBulkAdd={handleBulkAdd}
                lang={lang}
            />
        </div>
    );
};

export default ResourceRequestForm;